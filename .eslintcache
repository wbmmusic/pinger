[{"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\index.js":"1","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\components\\Top.js":"2","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\components\\StatusTable.js":"3","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\reportWebVitals.js":"4","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\App.js":"5","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\Updates.js":"6"},{"size":565,"mtime":1610244807090,"results":"7","hashOfConfig":"8"},{"size":18196,"mtime":1610244807089,"results":"9","hashOfConfig":"8"},{"size":8983,"mtime":1610244807088,"results":"10","hashOfConfig":"8"},{"size":375,"mtime":1610244807091,"results":"11","hashOfConfig":"8"},{"size":910,"mtime":1610244807086,"results":"12","hashOfConfig":"8"},{"size":4827,"mtime":1610244807086,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ft5bib",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\index.js",[],["29","30"],"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\components\\Top.js",["31","32","33"],"\r\nimport React, { useState, Fragment, useEffect } from 'react'\r\nimport { Button, Form, FormControl, InputGroup, Modal, Nav, Navbar, NavDropdown, Spinner, Table } from 'react-bootstrap'\r\nimport StatusTable from './StatusTable'\r\nconst { ipcRenderer } = window.require('electron')\r\n\r\nconst Cryptr = require('cryptr');\r\nconst cryptr = new Cryptr('myTotalySecretKey');\r\n\r\nexport default function Top() {\r\n    const defaultNewDeviceModal = {\r\n        show: false,\r\n        name: '',\r\n        address: '',\r\n        notes: '',\r\n        frequency: 10,\r\n        trys: 3\r\n    }\r\n    const defaultEmailSettingsModal = {\r\n        show: false,\r\n        provider: '',\r\n        email: '',\r\n        password: '',\r\n        newAddress: '',\r\n        save: false,\r\n        addresses: [],\r\n        processing: false\r\n    }\r\n    const [newDeviceModal, setNewDeviceModal] = useState(defaultNewDeviceModal)\r\n    const [emailSettingsModal, setEmailSettingsModal] = useState(defaultEmailSettingsModal)\r\n    const [processingModal, setProcessingModal] = useState(false)\r\n\r\n    useEffect(() => {\r\n        ipcRenderer.on('emailSettings', (e, emailSettings) => {\r\n            let tempEmailSettings = { ...emailSettingsModal }\r\n            tempEmailSettings.show = true\r\n            tempEmailSettings.provider = emailSettings.provider\r\n            tempEmailSettings.email = emailSettings.email\r\n            tempEmailSettings.password = cryptr.decrypt(emailSettings.password)\r\n            tempEmailSettings.addresses = emailSettings.addresses\r\n            setProcessingModal(false)\r\n            setEmailSettingsModal(tempEmailSettings)\r\n        })\r\n\r\n        ipcRenderer.on('emailUpdated', () => {\r\n            setProcessingModal(false)\r\n        })\r\n\r\n        return () => {\r\n            ipcRenderer.ners('emailSettings')\r\n            ipcRenderer.removeAllListeners('emailUpdated')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (emailSettingsModal.save === true) {\r\n                let thePass = cryptr.encrypt(emailSettingsModal.password)\r\n                ipcRenderer.send('updateSettings', {\r\n                    provider: emailSettingsModal.provider,\r\n                    email: emailSettingsModal.email,\r\n                    password: thePass,\r\n                    addresses: emailSettingsModal.addresses\r\n                })\r\n                closeEmailModal()\r\n            }\r\n        }, 100);\r\n\r\n    }, [emailSettingsModal])\r\n\r\n    const addDevice = () => {\r\n        //console.log('Add Device')\r\n        let tempNewDeviceModal = { ...defaultNewDeviceModal }\r\n        tempNewDeviceModal.show = true\r\n        setNewDeviceModal(tempNewDeviceModal)\r\n    }\r\n\r\n    const changeTrys = (value) => {\r\n        let theValue = parseInt(value)\r\n        let tempNewDeviceModal = { ...newDeviceModal }\r\n        tempNewDeviceModal.trys = theValue\r\n        setNewDeviceModal(tempNewDeviceModal)\r\n    }\r\n\r\n    const changeFrequency = (value) => {\r\n        let theValue = parseFloat(value)\r\n        //console.log(theValue)\r\n        let tempNewDeviceModal = { ...newDeviceModal }\r\n        tempNewDeviceModal.frequency = theValue\r\n        setNewDeviceModal(tempNewDeviceModal)\r\n    }\r\n\r\n    const changeAddress = (theAddress) => {\r\n        //console.log(theAddress)\r\n        let tempNewDeviceModal = { ...newDeviceModal }\r\n        tempNewDeviceModal.address = theAddress\r\n        setNewDeviceModal(tempNewDeviceModal)\r\n    }\r\n\r\n    const changeName = (theName) => {\r\n        //console.log(theName)\r\n        let tempNewDeviceModal = { ...newDeviceModal }\r\n        tempNewDeviceModal.name = theName\r\n        setNewDeviceModal(tempNewDeviceModal)\r\n    }\r\n\r\n    const changeNotes = (theNotes) => {\r\n        //console.log(theNotes)\r\n        let tempNewDeviceModal = { ...newDeviceModal }\r\n        tempNewDeviceModal.notes = theNotes\r\n        setNewDeviceModal(tempNewDeviceModal)\r\n    }\r\n\r\n    const createDevice = () => {\r\n        ipcRenderer.send('newDevice', newDeviceModal)\r\n        setNewDeviceModal(defaultNewDeviceModal)\r\n    }\r\n\r\n    const hideModal = () => {\r\n        setNewDeviceModal(defaultNewDeviceModal)\r\n    }\r\n\r\n    const pingAll = () => {\r\n        ipcRenderer.send('pingAll')\r\n    }\r\n\r\n    const changePassword = (pass) => {\r\n        let tempEmailSettingsModal = { ...emailSettingsModal }\r\n        tempEmailSettingsModal.password = pass\r\n        setEmailSettingsModal(tempEmailSettingsModal)\r\n    }\r\n\r\n    const changeEmail = (email) => {\r\n        let tempEmailSettingsModal = { ...emailSettingsModal }\r\n        tempEmailSettingsModal.email = email\r\n        setEmailSettingsModal(tempEmailSettingsModal)\r\n    }\r\n\r\n    const emailSettings = () => {\r\n        let tempX = { ...emailSettingsModal }\r\n        tempX.save = false\r\n        tempX.show = false\r\n        tempX.processing = true\r\n        setEmailSettingsModal(tempX)\r\n        ipcRenderer.send('getAppSettings')\r\n    }\r\n\r\n    const closeEmailModal = () => {\r\n        setEmailSettingsModal(defaultEmailSettingsModal)\r\n    }\r\n\r\n    const handleNewAddress = (theNewAddress) => {\r\n        let tempEmailSettingsModal = { ...emailSettingsModal }\r\n        tempEmailSettingsModal.newAddress = theNewAddress\r\n        setEmailSettingsModal(tempEmailSettingsModal)\r\n    }\r\n\r\n    const handleUpdateEmailSettings = () => {\r\n        let tempX = { ...emailSettingsModal }\r\n        tempX.save = true\r\n        tempX.show = false\r\n        tempX.processing = true\r\n        setEmailSettingsModal(tempX)\r\n        console.log('Handle Update Email Setting')\r\n    }\r\n\r\n    const hideProcessingModal = () => {\r\n        let tempEmailSettingsModal = { ...emailSettingsModal }\r\n        tempEmailSettingsModal.processing = false\r\n        setEmailSettingsModal(tempEmailSettingsModal)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Navbar bg=\"light\" expand=\"sm\" >\r\n                <Navbar.Brand >nubar-ping</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <NavDropdown title=\"Configure\" id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item onClick={emailSettings}>Email Settings</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        <NavDropdown title=\"Devices\" id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item onClick={pingAll}>Ping All</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item onClick={addDevice}>Add Device</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <div style={{ height: '100%', overflowY: 'auto' }}>\r\n                <StatusTable />\r\n                <Modal\r\n                    show={newDeviceModal.show}\r\n                    onHide={hideModal}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add New Device</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Table borderless size=\"sm\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ textAlign: 'right' }}>Name:</td>\r\n                                    <td>\r\n                                        <input\r\n                                            style={{ width: '100%' }}\r\n                                            type=\"text\" value={newDeviceModal.name}\r\n                                            onChange={(e) => changeName(e.target.value)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ textAlign: 'right' }}>Address:</td>\r\n                                    <td>\r\n                                        <input\r\n                                            style={{ width: '100%' }}\r\n                                            type=\"text\" value={newDeviceModal.address}\r\n                                            onChange={(e) => changeAddress(e.target.value)} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ textAlign: 'right' }}>Notes:</td>\r\n                                    <td>\r\n                                        <textarea\r\n                                            style={{ width: '100%', fontSize: '12px' }}\r\n                                            value={newDeviceModal.notes}\r\n                                            onChange={(e) => changeNotes(e.target.value)}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ textAlign: 'right' }}>Ping Frequency:</td>\r\n                                    <td>\r\n                                        <input type=\"number\" min=\"15\" max=\"720\"\r\n                                            value={newDeviceModal.frequency}\r\n                                            onChange={(e) => changeFrequency(e.target.value)} />{\" Seconds\"}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ textAlign: 'right' }}>Trys Before Email:</td>\r\n                                    <td><input type=\"number\" min=\"1\" max=\"100\"\r\n                                        value={newDeviceModal.trys} onChange={(e) => changeTrys(e.target.value)} /></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button size=\"sm\" variant=\"secondary\" onClick={hideModal}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button size=\"sm\" variant=\"primary\" onClick={() => createDevice()}>Add Device</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <Modal\r\n                    show={emailSettingsModal.show}\r\n                    onHide={closeEmailModal}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Email Settings</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Table borderless size=\"sm\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colSpan=\"2\">Send Email From</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={labelStyle}>Provider:</td>\r\n                                    <td>\r\n                                        <select>\r\n                                            <option>Hotmail / Outlook</option>\r\n                                            <option>Gmail</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={labelStyle}>Email:</td>\r\n                                    <td>\r\n                                        <FormControl\r\n                                            size=\"sm\"\r\n                                            placeholder=\"Email Address\"\r\n                                            aria-label=\"Email Address\"\r\n                                            aria-describedby=\"basic-addon2\"\r\n                                            type=\"email\"\r\n                                            onChange={(e) => changeEmail(e.target.value)}\r\n                                            value={emailSettingsModal.email}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={labelStyle}>Password:</td>\r\n                                    <td>\r\n                                        <FormControl\r\n                                            size=\"sm\"\r\n                                            placeholder=\"Email Account Password\"\r\n                                            aria-label=\"Email Account Password\"\r\n                                            aria-describedby=\"basic-addon2\"\r\n                                            type=\"password\"\r\n                                            onChange={(e) => changePassword(e.target.value)}\r\n                                            value={emailSettingsModal.password}\r\n                                        />\r\n\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colSpan=\"2\">Send Email To</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={labelStyle}>Address/s:</td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <Form onSubmit={(e) => {\r\n                                                e.preventDefault()\r\n                                                let tempEmailSettingsModal = { ...emailSettingsModal }\r\n                                                tempEmailSettingsModal.addresses.push(tempEmailSettingsModal.newAddress)\r\n                                                tempEmailSettingsModal.newAddress = ''\r\n                                                setEmailSettingsModal(tempEmailSettingsModal)\r\n                                            }}>\r\n                                                <InputGroup className=\"mb-3\">\r\n                                                    <FormControl\r\n                                                        size=\"sm\"\r\n                                                        placeholder=\"Add Recipient Email\"\r\n                                                        aria-label=\"Add Recipient Email\"\r\n                                                        aria-describedby=\"basic-addon2\"\r\n                                                        type=\"email\"\r\n                                                        onChange={(e) => handleNewAddress(e.target.value)}\r\n                                                        value={emailSettingsModal.newAddress}\r\n                                                    />\r\n                                                    <InputGroup.Append>\r\n                                                        <Button size=\"sm\" type=\"submit\" variant=\"outline-primary\">➕</Button>\r\n                                                    </InputGroup.Append>\r\n                                                </InputGroup>\r\n                                            </Form>\r\n                                        </div>\r\n                                        <div>\r\n                                            {emailSettingsModal.addresses.map(usr => (\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: 'inline-block',\r\n                                                        fontSize: '12px',\r\n                                                        backgroundColor: 'lightgray',\r\n                                                        padding: '2px',\r\n                                                        marginRight: '3px',\r\n                                                        marginBottom: '1px',\r\n                                                        userSelect: 'none'\r\n                                                    }}\r\n                                                >\r\n                                                    {usr}\r\n                                                    <div style={{ display: 'inline-block', fontSize: '10px', marginLeft: '4px', cursor: 'pointer' }}>\r\n                                                        ✖️\r\n                                                    </div>\r\n                                                </div>\r\n                                            ))}\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button size=\"sm\" variant=\"secondary\" onClick={closeEmailModal}>Close</Button>\r\n                        <Button size=\"sm\" variant=\"primary\" onClick={() => handleUpdateEmailSettings()}>Save Settings</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <Modal\r\n                    show={emailSettingsModal.processing}\r\n                    onHide={hideProcessingModal}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Processing</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Spinner size=\"xl\" animation=\"border\" />\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst labelStyle = {\r\n    textAlign: 'right',\r\n    width: '1px'\r\n}","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\components\\StatusTable.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\reportWebVitals.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\App.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\nubar-ping\\src\\Updates.js",["34"],"import React, { useEffect, useState } from 'react'\r\nconst { ipcRenderer } = window.require('electron')\r\n\r\nexport default function Updates() {\r\n    const [show, setShow] = useState(false)\r\n    const [popupContents, setPopupContents] = useState({\r\n        contents: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log('Top Of Updates')\r\n        ipcRenderer.on('checkingForUpdates', () => {\r\n            console.log('Checking for updates')\r\n        })\r\n\r\n        ipcRenderer.on('updateAvailable', () => {\r\n            console.log('Downloading update')\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max={100} value=\"0\" />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>close</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('noUpdate', () => {\r\n            console.log('Up to date')\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloaded', (e, releaseInfo) => {\r\n            console.log('Update Downloaded')\r\n            //console.log(releaseInfo)\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    <p>New update {\"v\" + releaseInfo.version} downloaded</p>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setPopupContents()}>Update on exit</button>\r\n                                </td>\r\n                                <td>\r\n                                    <button onClick={() => {\r\n                                        ipcRenderer.send('installUpdate')\r\n                                        setShow(false)\r\n                                    }}>Update and restart app now</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('updateError', (error) => {\r\n            console.log('Update Error', error,)\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloadProgress', (e, progressPercent) => {\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max=\"100\" value={Math.round(progressPercent).toString()} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>hide</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n            setPopupContents(tempPopupContents)\r\n        })\r\n\r\n        return () => {\r\n            ipcRenderer.removeAllListeners('checkingForUpdates')\r\n            ipcRenderer.removeAllListeners('updateAvailable')\r\n            ipcRenderer.removeAllListeners('noUpdate')\r\n            ipcRenderer.removeAllListeners('updateError')\r\n            ipcRenderer.removeAllListeners('updateDownloaded')\r\n            ipcRenderer.removeAllListeners('updateDownloadProgress')\r\n        }\r\n    }, [])\r\n\r\n    const makePopup = () => {\r\n        if (show === true) {\r\n            return (\r\n                <div style={{ position: 'fixed', bottom: '10px', right: '10px', backgroundColor: 'white', padding: '10px', boxShadow: '0px 0px 6px 2px', fontSize: '12px' }}>\r\n                    {popupContents.contents}\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        makePopup()\r\n    )\r\n}\r\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":31,"column":12,"nodeType":"41","messageId":"42","endLine":31,"endColumn":27},{"ruleId":"43","severity":1,"message":"44","line":53,"column":8,"nodeType":"45","endLine":53,"endColumn":10,"suggestions":"46"},{"ruleId":"43","severity":1,"message":"47","line":69,"column":8,"nodeType":"45","endLine":69,"endColumn":28,"suggestions":"48"},{"ruleId":"43","severity":1,"message":"49","line":112,"column":8,"nodeType":"45","endLine":112,"endColumn":10,"suggestions":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'processingModal' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'emailSettingsModal'. Either include it or remove the dependency array.","ArrayExpression",["53"],"React Hook useEffect has a missing dependency: 'closeEmailModal'. Either include it or remove the dependency array.",["54"],"React Hook useEffect has a missing dependency: 'popupContents'. Either include it or remove the dependency array.",["55"],"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [emailSettingsModal]",{"range":"62","text":"63"},"Update the dependencies array to be: [closeEmailModal, emailSettingsModal]",{"range":"64","text":"65"},"Update the dependencies array to be: [popupContents]",{"range":"66","text":"67"},[1882,1884],"[emailSettingsModal]",[2431,2451],"[closeEmailModal, emailSettingsModal]",[4362,4364],"[popupContents]"]